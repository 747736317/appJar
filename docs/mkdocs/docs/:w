#Toolbars, Menubars & Statusbars
----
Toolbars and Menubars are features common to most GUIs, you'll be used to seeing them along the top of apps, such as MS Word.  
Statusbars are also useful features, they allow you to show information about what's going on in a GUI, usually along the bottom of the app.  

##Toolbar
___
Toolbars (sometimes known as ribbons) appear across the top of a GUI.  
They offer a series of buttons to click, which can be used to change settings/functionality in a GUI.
![Toolbar](img/bars/toolbar_1.png)  

```python
tools = ["ABOUT", "REFRESH", "OPEN", "CLOSE", "SAVE",
        "NEW", "SETTINGS", "PRINT", "SEARCH", "UNDO",
        "REDO", "PREFERENCES", "HOME", "HELP", "CALENDAR",
        "WEB", "OFF"]

app.addToolbar(tools, tbFunc, True)
```

####Create Toolbars

* `.addToolbar(names, funcs, findIcon=False)`  
    Will add a list of buttons along the top, in a toolbar. Each button will call the corresponding function.  
    If only one function is supplied, they will all call the same function, providing the buttons name as a parameter.  
    A set of icons is available, if `findIcon` is set to True, then appJar will attempt to fins an icon for each button.  

####Set Toolbars

* `.setToolbarIcon(name, icon)`  
    Will set an icon for the corresponding button in the toolbar.  
    Use the name of any of the icons in the resource folder (without the folder or file extension).  

* `.setToolbarImage(name, image)`  
    Will set an image for the corresponding button in the toolbar.  

* `.setToolbarEnabled()` & `.setToolbarDisabled()`  
    Will enable/disable all buttons on the toolbar.  

* `.setToolbarButtonEnabled(name)` & `.setToolbarButtonDisabled(name)`  
    Will enable/disable the named toolbar button.  

* `.showToolbar()` & `.hideToolbar()`  
    Will show/hide the toolbar.  

##Menubar
___
Adds a standard Menubar along the top of the GUI
The menubar will show, once the first menu has been added.
You can add a single menu option, or a list of menu options.

####Special Features:  

* `shortcut` These are keyboard shortcuts to call a menu item.  
    These should always be a combination of *special keys* and a *regular key*, separated by dashes.  
    `Control`, `Option`, `Alt`, `Shift`, `Command`, `Meta`  
    e.g. `"Control-s"` or `"Control-Shift-z"`  

* `underline` If set to an Integer, the corresponding character will be underlined.  

* `tearable` If this is set to True, it's possible to undock the menu.  

####Create Menus

* `.createMenu(title, tearable=False)`  
    Will create a top-level menu, to add menu items to.

* `.addMenuItem(title, item, func=None, shortcut=None, underline=-1)`  
    Add a menu item to the named menu, with the specified functio.  
    If the named menu does not exist, it will be automatically created.  
    If the menu name is a '-', then a separator will be added to the menu.  

* `.addMenuList(title, names, functions)`  
    Will create a top-level menu, with the specified title.  
    Within the menu will be the list of names, each calling the corresponding function in the function list.  
    If only one function is provided, all menus will call the same function.  
    If the menu name is a '-', then a separator will be added to the menu.  

* `.addMenu(title, function, shortcut=None, underline=-1)`  
    Adds a single menu option, that will call the specified function.  

* `.addMenuSeparator(title)`  
    Add a separator to the named menu.  

* `.addMenuCheckBox(title, name, function=None, shortcut=None, underline=-1)`  
    Add a check box, to the named menu, with the specified name.  

* `.addMenuRadioButton(title, menu, name, value, function=None, shortcut=None, underline=-1)`  
    Add a radio button, to the named menu, grouped by name, with the specified value.  

####Set Menus

* `.setMenuCheckBox(title, menu)`  
    Inverts the specified check box, in the named menu.

* `.setMenuRadioButton(title, menu, value)`  
    Selects the specified value, of the specified radio button, in the named menu.

* `.setMenuImage(menu, title, image, align='text')`  
    Will set the specified image for the specified menu item.  

* `.setMenuIcon(menu, title, icon, align='text')`  
    Will set the specified icon for the specified menu item.  

* `.disableMenuItem(title, item)` & `.enableMenuItem(title, item)`  
    Will enable/disable the specified menu item.  

* `.disableMenu(title)` & `.enableMenu(title)`  
    Will disable/enable the specified menu.  

* `.disableAllMenus()` & `.enableAllMenus()`  
    Will disable/enable all menus.  

####Get Menus

* `.getMenuCheckBox(title, menu)`  
    Get the value of the specified check box, from the named menu.  
    Returns True or False.  

* `.getMenuRadioButton(title, menu)`  
    Get the value of the specified radio button, from the named menu.  
    Returns the value of the checked radio button.  

####Platform Specific Menus
It's possible to interact with menus that are specific to particular platforms.  

On **Windows**, you can add items to the *System Menu*, accessed by clicking the icon in the top left corner of the GUI.  
Simply add menu items using the title `SYSTEM`.  

On **Mac**, there are a bunch of special menus you can access.  

The *Application Menu* is always present, and is always named after python - usually *python3*.  
To add items to this menu, simply call `.addMenuItem()` with the title `APPMENU`.  

* `.addMenuPreferences(func)`  
    This will enable the *Preferences Menu*, in the *Application Menu*, and link it to the specified function.  

* `.addMenuHelp(func)`  
    This will create the *Help Menu* with a *Search Menu*,  
    Followed by *pyhton3 Help*, which links to the function specified.  
    You can add further items to the *Help Menu* using the title `HELP`.  
    
* `.addMenuWindow()`  
    This will create the standard *Window Menu*.  
    You can add further items to the *Window Menu* using the title `WINDOW`.  

##Statusbar
___
Adds a statusbar along the bottom of the GUI.
This can be used for easy debugging, as info for the user, or to show current settings.  

![Statusbar](img/bars/statusbar_1.png)  

```python
app.addStatusbar(fields=3)
app.setStatusbar("Line: 20", 0)
app.setStatusbar("Column: 4", 1)
app.setStatusbar("Mode: Edit", 2)
```

![Statusbar](img/bars/statusbar_2.png)  

```python
app.addToolbar(tools, tbFunc, True)
app.addStatusbar(fields=3, side="RIGHT")
# NOTE: 0 is now on the right
app.setStatusbarWidth(50, 2)
app.setStatusbarBg("red", 2)
app.setStatusbarFg("white", 2)
```

####Create Statusbars  

* `.addStatusBar(header="", fields=1, side=None)`  
    This turns the statusbar on, and if a header is supplied, will prepend the header before every status.  
    If ```fields``` is populated, it's possible to have multiple status boxes, each addressable by a number.  
    ```side``` can be set as LEFT/RIGHT to make the fields appear from the left or right side, otherwise they will stretch equally.  

####Set Statusbars  
* `.setStatusbar(text, field=0)`  
    This updates the contents of the statusbar.  
    Again, if a header was set when adding the statusbar, it will be prepended to the message.  
    If multiple fields were created, a position should be supplied to populate (starting from 0).  

* `.clearStatusbar(field=0)`  
    Clear anything displayed in the statusbar, along with any header that might be set.  
    If multiple fields were created, specify which one, otherwise all fields will be cleared.  

* `.setStatusbarWidth(width, field=0)`  
    Set the width of the specified statusbar field (in characters).  
